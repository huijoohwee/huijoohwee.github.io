{
  "@context": {
    "@version": 1.1,
    "@base": "sch:base.jsonld",
    "@vocab": "sch:vocab.jsonld",
    "core": "sch:core.jsonld",
    "uc": "sch:uc.jsonld",
    "wf": "sch:wf.jsonld",
    "kg": "sch:kg.jsonld",
    "rdf": "rdf:",
    "rdfs": "http://www.w3.org/2000/01/rdf-sch#",
    "xsd": "xsd:",
    "nquads": "https://www.w3.org/TR/n-quads/#n-quads",
    "jjnhm": "sch:jjnhm.jsonld",
    "jsonld": "https://www.w3.org/2013/json-ld-context/rdfa11",
    "jdbl": "sch:jdbl.jsonld",
    "nqds": "sch:nqds.jsonld",
    "hbs": "sch:hbs.jsonld",
    "mmd": "sch:mmd.jsonld",
    "PredicateRegistry": "nqds:PredicateRegistry",
    "PredicateClass": "nqds:PredicateClass",
    "Predicate": "nqds:Predicate",
    "Category": "nqds:Category",
    "label": "rdfs:label",
    "comment": "rdfs:comment",
    "category": "nqds:category",
    "predicates": {
      "@id": "nqds:predicates",
      "@container": "@list"
    },
    "subjectTypes": {
      "@id": "nqds:subjectTypes",
      "@container": "@list"
    },
    "objectTypes": {
      "@id": "nqds:objectTypes",
      "@container": "@list"
    },
    "usagePattern": "nqds:usagePattern",
    "desc": "rdfs:comment",
    "totalPredicates": "nqds:totalPredicates",
    "categoryDistribution": "nqds:categoryDistribution",
    "mostUsedPredicates": {
      "@id": "nqds:mostUsedPredicates",
      "@container": "@list"
    },
    "version": "core:version",
    "created": {
      "@id": "core:created",
      "@type": "xsd:dateTime"
    },
    "updated": {
      "@id": "core:updated",
      "@type": "xsd:dateTime"
    },
    "examples": "nqds:examples",
    "ptn": "nqds:ptn",
    "docs": "rdfs:seeAlso"
  },
  "@id": "sch:nqds-predicates.jsonld#Registry:v1.1",
  "@type": "PredicateRegistry",
  "label": "NQDS Predicate Registry",
  "comment": "Registry of predicates for NQDS semantic payloads,organized by category with usage patterns and validator guidance",
  "version": "1.1.0",
  "created": "2025-09-26T00:00:00Z",
  "updated": "2025-10-09T00:00:00Z",
  "totalPredicates": 87,
  "categoryDistribution": {
    "action": 32,
    "rel": 22,
    "state": 10,
    "temporal": 8,
    "conditional": 7,
    "quantitative": 6,
    "communication": 8,
    "evaluation": 6
  },
  "mostUsedPredicates": [
    "[defines]",
    "[manages]",
    "[provides]",
    "[contains]",
    "[enables]"
  ],
  "predicates": [
    {
      "@type": "PredicateClass",
      "label": "Action Predicates",
      "category": "action",
      "desc": "Predicates express actions,operations or orch steps",
      "predicates": [
        {
          "predicate": "[initiates]",
          "desc": "Starts or triggers process or project",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "Process",
            "Project"
          ],
          "usagePattern": "workflow initiation"
        },
        {
          "predicate": "[defines]",
          "desc": "Defines or specifies concept,rule,or req",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "Requirements",
            "Rules"
          ],
          "usagePattern": "spec"
        },
        {
          "predicate": "[designs]",
          "desc": "Designs or architects system or comp",
          "subjectTypes": [
            "Human"
          ],
          "objectTypes": [
            "Blueprint",
            "arch"
          ],
          "usagePattern": "design activities"
        },
        {
          "predicate": "[orchestrates]",
          "desc": "Coordinates multiple components,agents or flows",
          "subjectTypes": [
            "Coordinator",
            "System"
          ],
          "objectTypes": [
            "Workflow",
            "Process"
          ],
          "usagePattern": "flow orch"
        },
        {
          "predicate": "[executes]",
          "desc": "Performs or runs task or check",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "Task",
            "Gate"
          ],
          "usagePattern": "task exec"
        },
        {
          "predicate": "[deploys]",
          "desc": "Deploys or releases components or services",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "svc",
            "Application"
          ],
          "usagePattern": "deploy"
        },
        {
          "predicate": "[generates]",
          "desc": "Generates artifacts e.g. code,tests,or documents",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "Code",
            "Tests",
            "Artifact"
          ],
          "usagePattern": "artifact generation"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "rel Predicates",
      "category": "rel",
      "desc": "Predicates model structural or semantic relationships between entities",
      "predicates": [
        {
          "predicate": "[contains]",
          "desc": "Contains or includes elements",
          "subjectTypes": [
            "Container",
            "Collection"
          ],
          "objectTypes": [
            "Element",
            "comp"
          ],
          "usagePattern": "containment relationships"
        },
        {
          "predicate": "[connects]",
          "desc": "Connects two components or systems",
          "subjectTypes": [
            "comp",
            "System"
          ],
          "objectTypes": [
            "comp",
            "System"
          ],
          "usagePattern": "connectivity modeling"
        },
        {
          "predicate": "[supports]",
          "desc": "Provides support for function or impl",
          "subjectTypes": [
            "System",
            "comp"
          ],
          "objectTypes": [
            "Feature",
            "cap"
          ],
          "usagePattern": "support relationships"
        },
        {
          "predicate": "[includes]",
          "desc": "Includes items or content",
          "subjectTypes": [
            "Collection"
          ],
          "objectTypes": [
            "Item"
          ],
          "usagePattern": "inclusion"
        },
        {
          "predicate": "[references]",
          "desc": "References external resource or document",
          "subjectTypes": [
            "System",
            "comp"
          ],
          "objectTypes": [
            "Resource",
            "Document"
          ],
          "usagePattern": "citations and links"
        },
        {
          "predicate": "[owns]",
          "desc": "Ownership or control of resource",
          "subjectTypes": [
            "Owner"
          ],
          "objectTypes": [
            "Resource"
          ],
          "usagePattern": "ownership"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "State Predicates",
      "category": "state",
      "desc": "Predicates describe states,capabilities,permissions and invariant properties",
      "predicates": [
        {
          "predicate": "[is]",
          "desc": "Equals or has value/state",
          "subjectTypes": [
            "Any"
          ],
          "objectTypes": [
            "Value",
            "State"
          ],
          "usagePattern": "state assertions"
        },
        {
          "predicate": "[has]",
          "desc": "Has attribute or property",
          "subjectTypes": [
            "Entity",
            "System"
          ],
          "objectTypes": [
            "Attribute"
          ],
          "usagePattern": "attribute ownership"
        },
        {
          "predicate": "[can]",
          "desc": "Indicates impl or permission",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "cap",
            "Permission"
          ],
          "usagePattern": "cap assertions"
        },
        {
          "predicate": "[must]",
          "desc": "Mandatory condition or req",
          "subjectTypes": [
            "Entity"
          ],
          "objectTypes": [
            "Condition",
            "req"
          ],
          "usagePattern": "enforcement"
        },
        {
          "predicate": "[becomes]",
          "desc": "Transitions to new state",
          "subjectTypes": [
            "Entity"
          ],
          "objectTypes": [
            "State"
          ],
          "usagePattern": "state transition"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "Temporal Predicates",
      "category": "temporal",
      "desc": "Predicates express temporal ordering or relationships",
      "predicates": [
        {
          "predicate": "[before]",
          "desc": "Occurs before another event",
          "subjectTypes": [
            "Event",
            "Process"
          ],
          "objectTypes": [
            "Event",
            "Time"
          ],
          "usagePattern": "temporal ordering"
        },
        {
          "predicate": "[after]",
          "desc": "Occurs after another event",
          "subjectTypes": [
            "Event",
            "Process"
          ],
          "objectTypes": [
            "Event",
            "Time"
          ],
          "usagePattern": "temporal ordering"
        },
        {
          "predicate": "[during]",
          "desc": "Occurs during period or phase",
          "subjectTypes": [
            "Event",
            "Process"
          ],
          "objectTypes": [
            "Period",
            "Phase"
          ],
          "usagePattern": "temporal scoping"
        },
        {
          "predicate": "[then]",
          "desc": "Then,next in sequence",
          "subjectTypes": [
            "Step",
            "Process"
          ],
          "objectTypes": [
            "Step",
            "Action"
          ],
          "usagePattern": "sequence chaining"
        },
        {
          "predicate": "[leads-to]",
          "desc": "Leads to result or event",
          "subjectTypes": [
            "Action",
            "Event"
          ],
          "objectTypes": [
            "Result",
            "Event"
          ],
          "usagePattern": "causal chains"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "Conditional Predicates",
      "category": "conditional",
      "desc": "Predicates used to express conditional logic and guards",
      "predicates": [
        {
          "predicate": "[if]",
          "desc": "If condition holds then...",
          "subjectTypes": [
            "Condition",
            "Rule"
          ],
          "objectTypes": [
            "Condition",
            "State"
          ],
          "usagePattern": "conditional branching"
        },
        {
          "predicate": "[unless]",
          "desc": "Unless condition holds",
          "subjectTypes": [
            "Condition"
          ],
          "objectTypes": [
            "Condition"
          ],
          "usagePattern": "negated conditions"
        },
        {
          "predicate": "[while]",
          "desc": "While condition true",
          "subjectTypes": [
            "Process",
            "State"
          ],
          "objectTypes": [
            "Condition"
          ],
          "usagePattern": "looping/guarded exec"
        },
        {
          "predicate": "[until]",
          "desc": "Until condition satisfied",
          "subjectTypes": [
            "Process"
          ],
          "objectTypes": [
            "Condition"
          ],
          "usagePattern": "term guard"
        },
        {
          "predicate": "[and]",
          "desc": "Logical AND of conditions",
          "subjectTypes": [
            "Condition"
          ],
          "objectTypes": [
            "Condition"
          ],
          "usagePattern": "composite guards"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "Quantitative Predicates",
      "category": "quantitative",
      "desc": "Predicates representing measures,counts,and numeric evaluations",
      "predicates": [
        {
          "predicate": "[measures]",
          "desc": "Measures metric or value",
          "subjectTypes": [
            "Metric",
            "System"
          ],
          "objectTypes": [
            "Value",
            "Measurement"
          ],
          "usagePattern": "metric reporting"
        },
        {
          "predicate": "[scores]",
          "desc": "Assigns score or rating",
          "subjectTypes": [
            "Evaluator"
          ],
          "objectTypes": [
            "Score"
          ],
          "usagePattern": "scoring"
        },
        {
          "predicate": "[counts]",
          "desc": "Counts occurrences or items",
          "subjectTypes": [
            "Counter"
          ],
          "objectTypes": [
            "Number"
          ],
          "usagePattern": "counting"
        },
        {
          "predicate": "[totals]",
          "desc": "Totals or aggregates values",
          "subjectTypes": [
            "Aggregator"
          ],
          "objectTypes": [
            "Totals"
          ],
          "usagePattern": "aggr"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "Communication Predicates",
      "category": "communication",
      "desc": "Predicates for messaging,publishing and subscriptions",
      "predicates": [
        {
          "predicate": "[sends]",
          "desc": "Sends message or data",
          "subjectTypes": [
            "Agent",
            "System"
          ],
          "objectTypes": [
            "Message",
            "Data"
          ],
          "usagePattern": "message transmission"
        },
        {
          "predicate": "[broadcasts]",
          "desc": "Broadcasts to many receivers",
          "subjectTypes": [
            "Sender"
          ],
          "objectTypes": [
            "Message"
          ],
          "usagePattern": "pub-sub broadcast"
        },
        {
          "predicate": "[receives]",
          "desc": "Receives message or data",
          "subjectTypes": [
            "Receiver"
          ],
          "objectTypes": [
            "Message",
            "Data"
          ],
          "usagePattern": "message receipt"
        },
        {
          "predicate": "[publishes]",
          "desc": "Publishes events or information",
          "subjectTypes": [
            "Publisher"
          ],
          "objectTypes": [
            "Event"
          ],
          "usagePattern": "event publishing"
        },
        {
          "predicate": "[subscribes]",
          "desc": "Subscribes to events or feeds",
          "subjectTypes": [
            "Subscriber"
          ],
          "objectTypes": [
            "Event"
          ],
          "usagePattern": "event subscription"
        }
      ]
    },
    {
      "@type": "PredicateClass",
      "label": "Evaluation Predicates",
      "category": "evaluation",
      "desc": "Predicates for assessment,comparison and optim",
      "predicates": [
        {
          "predicate": "[evaluates]",
          "desc": "Evaluates or assesses object",
          "subjectTypes": [
            "Evaluator"
          ],
          "objectTypes": [
            "Object",
            "perf"
          ],
          "usagePattern": "evaluation"
        },
        {
          "predicate": "[assesses]",
          "desc": "Assesses quality or state",
          "subjectTypes": [
            "Assessor"
          ],
          "objectTypes": [
            "Quality"
          ],
          "usagePattern": "quality assessment"
        },
        {
          "predicate": "[compares]",
          "desc": "Compares alternatives or results",
          "subjectTypes": [
            "Comparator"
          ],
          "objectTypes": [
            "Options"
          ],
          "usagePattern": "comparison"
        },
        {
          "predicate": "[optimizes]",
          "desc": "Optimizes for speed or cost",
          "subjectTypes": [
            "Optimizer"
          ],
          "objectTypes": [
            "perf"
          ],
          "usagePattern": "opt"
        }
      ]
    }
  ],
  "patternTemplates": {
    "creationPattern": "::creation::(Subject)-[creates|generates|produces]->{Artifact}",
    "managementPattern": "::mgmt::(Manager)-[manages|controls|maintains]->{Resource}",
    "communicationPattern": "::communication::(Sender)-[sends|communicates|notifies]->{Receiver}",
    "evaluationPattern": "::evaluation::(Evaluator)-[evaluates|assesses|measures]->{Target}",
    "relationshipPattern": "::rel::(Entity1)-[contains|includes|supports]->{Entity2}",
    "temporalPattern": "::temporal::(Event1)-[before|after|leads-to]->{Event2}"
  },
  "semanticRelationships": {
    "synonymGroups": [
      [
        "[creates]",
        "[generates]",
        "[produces]"
      ],
      [
        "[manages]",
        "[controls]",
        "[maintains]"
      ],
      [
        "[provides]",
        "[supplies]",
        "[offers]"
      ]
    ],
    "antonymPairs": [
      [
        "[enables]",
        "[prevents]"
      ],
      [
        "[includes]",
        "[excludes]"
      ],
      [
        "[accepts]",
        "[rejects]"
      ]
    ],
    "hierarchicalRelations": [
      {
        "from": "[contains]",
        "to": "[includes]",
        "then": "[covers]"
      },
      {
        "from": "[manages]",
        "to": "[controls]",
        "then": "[owns]"
      }
    ],
    "temporalChains": [
      {
        "sequence": [
          "[before]",
          "[during]",
          "[after]"
        ]
      },
      {
        "sequence": [
          "[initiates]",
          "[executes]",
          "[completes]"
        ]
      }
    ]
  },
  "validatorHints": {
    "resolveIRIs": "Ensure predicate IRIs or CURIEs resolve when merged with base/vocab contexts; canonicalize bracketed form to stable IRIs in tooling.",
    "usageValidation": "Validate subjectTypes and objectTypes against JSON-LD type contexts (core,uc,vocab); run nqds-parser and graph-validator on sample payloads.",
    "consistencyChecks": "Detect synonym groups,enforce preferred predicate canonicalization,and flag antonyms used together inconsistently.",
    "recommendedTools": [
      "nqds-parser",
      "graph-validator",
      "jsonld.js",
      "kg-diff-checker",
      "predicate-usage-analyzer"
    ]
  },
  "examples": [
    {
      "@type": "nqds:SemanticGraph",
      "label": "orch Example",
      "desc": "Agent aligns workflow and makes artifact; diagram and trace linkage shown in examples",
      "examplePath": "/sch/examples/nqds/orch-example.nqds",
      "triples": [
        "::orchestrator::(Orchestrator)-[orchestrates]->{Workflow}",
        "::workflow::(Workflow)-[executes]->{Task}",
        "::task::(Task)-[generates]->{Artifact}"
      ]
    }
  ],
  "releaseNotes": {
    "version": "1.1.0",
    "summary": "Normalized predicate registry,clearer categories,ptn templates,synonym/antonym groups and validator guidance; added recommended tooling",
    "compat": "Backwards compatible with previous bracketed predicate notation; tooling should canonicalize to IRIs for runtime."
  },
  "resp": "//huijoohwee.github.io/sch/nqds-predicates.jsonld#registry",
  "jjnhm": {
    "version": "3.0.0",
    "layer": "JSONLD",
    "complexity": "C1-MVP-Production",
    "governance": "Core-sch-Governance",
    "kpiTargets": {
      "token-density": "≥7.0-concepts/token",
      "semantic-clarity": "≥97%",
      "parse-time": "≤0.5ms",
      "val-success": "≥99%",
      "sch-compliance": "100%"
    }
  },
  "activeVerbs": [
    "execute",
    "validate",
    "optimize",
    "monitor"
  ],
  "kpiTarget": "perf-eff≥90%",
  "characteristics": [
    "composable",
    "traceable",
    "optimizable"
  ],
  "semanticCluster": {
    "cluster": "general-processing",
    "concepts": [
      "execute",
      "validate",
      "optimize",
      "monitor",
      "coordinate",
      "transform",
      "integrate",
      "configure"
    ],
    "kpi": "performance≥90%",
    "responsibility": "system-coordination",
    "characteristics": [
      "executable",
      "validatable",
      "optimizable",
      "monitorable"
    ]
  },
  "kpiTargets": {
    "primary": "performance≥90%",
    "secondary": [
      "parse-time≤0.5ms",
      "token-density≥7.0c/t",
      "semantic-clarity≥97%",
      "validation-success≥99%",
      "schema-compliance=100%"
    ],
    "composite": "enterprise-readiness≥95%"
  },
  "responsibilityMatrix": {
    "primary": "system-coordination",
    "secondary": [
      "quality-assurance",
      "performance-optimization",
      "error-resilience"
    ],
    "governance": [
      "compliance-enforcement",
      "audit-trail-maintenance",
      "metric-reporting"
    ],
    "orchestration": [
      "multi-agent-coordination",
      "workflow-synchronization",
      "resource-allocation"
    ]
  },
  "characteristicVectors": {
    "functional": [
      "executable",
      "validatable",
      "optimizable",
      "monitorable"
    ],
    "quality": [
      "reliable",
      "efficient",
      "maintainable",
      "scalable"
    ],
    "operational": [
      "monitorable",
      "debuggable",
      "recoverable",
      "upgradeable"
    ],
    "architectural": [
      "modular",
      "composable",
      "extensible",
      "interoperable"
    ]
  },
  "implementationPatterns": {
    "design": [
      "factory",
      "adapter",
      "observer",
      "strategy",
      "command"
    ],
    "architectural": [
      "microservices",
      "event-driven",
      "pipeline",
      "layered",
      "hexagonal"
    ],
    "integration": [
      "api-gateway",
      "message-queue",
      "event-bus",
      "service-mesh",
      "circuit-breaker"
    ],
    "data": [
      "repository",
      "unit-of-work",
      "cqrs",
      "event-sourcing",
      "saga"
    ]
  },
  "governanceMetadata": {
    "compliance": [
      "JJNHM-v3.0.0",
      "JSON-LD-1.1",
      "RDF-1.1",
      "SPARQL-1.1"
    ],
    "quality": [
      "ISO-25010",
      "NIST-CSF",
      "OWASP-ASVS",
      "W3C-WCAG"
    ],
    "security": [
      "RBAC",
      "ABAC",
      "OAuth2",
      "JWT",
      "TLS-1.3"
    ],
    "monitoring": [
      "OpenTelemetry",
      "Prometheus",
      "Grafana",
      "ELK-Stack"
    ]
  },
  "qualityGates": {
    "performance": [
      "latency≤200ms",
      "throughput≥1K/s",
      "cpu≤80%",
      "memory≤2GB"
    ],
    "reliability": [
      "uptime≥99.9%",
      "mtbf≥720h",
      "mttr≤15min",
      "error-rate≤0.1%"
    ],
    "security": [
      "vulnerability-scan=pass",
      "penetration-test=pass",
      "compliance-audit=pass"
    ],
    "maintainability": [
      "code-coverage≥80%",
      "complexity≤10",
      "duplication≤5%",
      "documentation≥90%"
    ]
  },
  "orchestrationDirectives": {
    "execution": [
      "parallel-processing",
      "load-balancing",
      "auto-scaling",
      "circuit-breaking"
    ],
    "coordination": [
      "event-choreography",
      "saga-orchestration",
      "workflow-engine",
      "state-machine"
    ],
    "monitoring": [
      "health-checks",
      "metrics-collection",
      "alerting",
      "tracing"
    ],
    "recovery": [
      "backup-restore",
      "disaster-recovery",
      "failover",
      "rollback"
    ]
  },
  "validationRules": {
    "structural": [
      "schema-validation",
      "type-checking",
      "constraint-validation",
      "referential-integrity"
    ],
    "semantic": [
      "business-rules",
      "domain-constraints",
      "workflow-validation",
      "state-consistency"
    ],
    "quality": [
      "performance-benchmarks",
      "security-scans",
      "accessibility-checks",
      "usability-tests"
    ],
    "compliance": [
      "regulatory-compliance",
      "standard-conformance",
      "policy-enforcement",
      "audit-requirements"
    ]
  }
}